// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ORApp.Data.Models;

namespace ORApp.Data.Context;

public partial class ORDBContext : DbContext
{
    public ORDBContext(DbContextOptions<ORDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ApiIngest> ApiIngest { get; set; }

    public virtual DbSet<BettingMarkets> BettingMarkets { get; set; }

    public virtual DbSet<BettingOutcomes> BettingOutcomes { get; set; }

    public virtual DbSet<Coaches> Coaches { get; set; }

    public virtual DbSet<Countries> Countries { get; set; }

    public virtual DbSet<EventTypes> EventTypes { get; set; }

    public virtual DbSet<FixtureEvents> FixtureEvents { get; set; }

    public virtual DbSet<FixtureStatuses> FixtureStatuses { get; set; }

    public virtual DbSet<Fixtures> Fixtures { get; set; }

    public virtual DbSet<Leagues> Leagues { get; set; }

    public virtual DbSet<Lineups> Lineups { get; set; }

    public virtual DbSet<Odds> Odds { get; set; }

    public virtual DbSet<PasswordResets> PasswordResets { get; set; }

    public virtual DbSet<PaymentProviders> PaymentProviders { get; set; }

    public virtual DbSet<PaymentStatuses> PaymentStatuses { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<PlayerPositions> PlayerPositions { get; set; }

    public virtual DbSet<PlayerTransfers> PlayerTransfers { get; set; }

    public virtual DbSet<Players> Players { get; set; }

    public virtual DbSet<Predictions> Predictions { get; set; }

    public virtual DbSet<ProviderWebhookEvents> ProviderWebhookEvents { get; set; }

    public virtual DbSet<Seasons> Seasons { get; set; }

    public virtual DbSet<Sessions> Sessions { get; set; }

    public virtual DbSet<Standings> Standings { get; set; }

    public virtual DbSet<Statisticals> Statisticals { get; set; }

    public virtual DbSet<SubscriptionStatuses> SubscriptionStatuses { get; set; }

    public virtual DbSet<SubscriptionTiers> SubscriptionTiers { get; set; }

    public virtual DbSet<Subscriptions> Subscriptions { get; set; }

    public virtual DbSet<Teams> Teams { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<Venues> Venues { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApiIngest>(entity =>
        {
            entity.HasKey(e => e.IngestId).HasName("PK__ApiInges__D287CE5E8DF16193");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<BettingMarkets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BettingM__3214EC079CC2EBAE");
        });

        modelBuilder.Entity<BettingOutcomes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BettingO__3214EC07D0EBA34A");

            entity.HasOne(d => d.Market).WithMany(p => p.BettingOutcomes).HasConstraintName("FK__BettingOu__Marke__300424B4");
        });

        modelBuilder.Entity<Coaches>(entity =>
        {
            entity.HasKey(e => e.CoachId).HasName("PK__Coaches__F411D941AAFDB4C8");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Team).WithMany(p => p.Coaches).HasConstraintName("FK__Coaches__TeamId__778AC167");
        });

        modelBuilder.Entity<Countries>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Countrie__3214EC07CF2EC223");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<EventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EventTyp__3214EC07310E11F1");
        });

        modelBuilder.Entity<FixtureEvents>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__FixtureE__7944C810702D1B3A");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.EventType).WithMany(p => p.FixtureEvents).HasConstraintName("FK__FixtureEv__Event__17036CC0");

            entity.HasOne(d => d.Fixture).WithMany(p => p.FixtureEvents).HasConstraintName("FK__FixtureEv__Fixtu__14270015");

            entity.HasOne(d => d.Player).WithMany(p => p.FixtureEvents).HasConstraintName("FK__FixtureEv__Playe__160F4887");

            entity.HasOne(d => d.Team).WithMany(p => p.FixtureEvents).HasConstraintName("FK__FixtureEv__TeamI__151B244E");
        });

        modelBuilder.Entity<FixtureStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FixtureS__3214EC0708708FC3");
        });

        modelBuilder.Entity<Fixtures>(entity =>
        {
            entity.HasKey(e => e.FixtureId).HasName("PK__Fixtures__26465B16749E32A7");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.AwayTeam).WithMany(p => p.FixturesAwayTeam).HasConstraintName("FK__Fixtures__AwayTe__0E6E26BF");

            entity.HasOne(d => d.FixtureStatus).WithMany(p => p.Fixtures).HasConstraintName("FK__Fixtures__Fixtur__0F624AF8");

            entity.HasOne(d => d.HomeTeam).WithMany(p => p.FixturesHomeTeam).HasConstraintName("FK__Fixtures__HomeTe__0D7A0286");

            entity.HasOne(d => d.League).WithMany(p => p.Fixtures).HasConstraintName("FK__Fixtures__League__0A9D95DB");

            entity.HasOne(d => d.Season).WithMany(p => p.Fixtures).HasConstraintName("FK__Fixtures__Season__0B91BA14");

            entity.HasOne(d => d.Venue).WithMany(p => p.Fixtures).HasConstraintName("FK__Fixtures__VenueI__0C85DE4D");
        });

        modelBuilder.Entity<Leagues>(entity =>
        {
            entity.HasKey(e => e.LeagueId).HasName("PK__Leagues__10ABBCF4C1DAF612");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Country).WithMany(p => p.Leagues).HasConstraintName("FK__Leagues__Country__6E01572D");
        });

        modelBuilder.Entity<Lineups>(entity =>
        {
            entity.HasKey(e => e.LineupId).HasName("PK__Lineups__492BA7DC14C98E87");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsStarter).HasDefaultValue(false);

            entity.HasOne(d => d.Fixture).WithMany(p => p.Lineups).HasConstraintName("FK__Lineups__Fixture__1AD3FDA4");

            entity.HasOne(d => d.Player).WithMany(p => p.Lineups).HasConstraintName("FK__Lineups__PlayerI__1CBC4616");

            entity.HasOne(d => d.Position).WithMany(p => p.Lineups).HasConstraintName("FK__Lineups__Positio__1EA48E88");

            entity.HasOne(d => d.Team).WithMany(p => p.Lineups).HasConstraintName("FK__Lineups__TeamId__1BC821DD");
        });

        modelBuilder.Entity<Odds>(entity =>
        {
            entity.HasKey(e => e.OddsId).HasName("PK__Odds__7D7DC403393D301F");

            entity.Property(e => e.RetrievedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Fixture).WithMany(p => p.Odds).HasConstraintName("FK__Odds__FixtureId__2DE6D218");

            entity.HasOne(d => d.Market).WithMany(p => p.Odds).HasConstraintName("FK__Odds__MarketId__2FCF1A8A");

            entity.HasOne(d => d.Outcome).WithMany(p => p.Odds).HasConstraintName("FK__Odds__OutcomeId__30C33EC3");

            entity.HasOne(d => d.Provider).WithMany(p => p.Odds).HasConstraintName("FK__Odds__ProviderId__2EDAF651");
        });

        modelBuilder.Entity<PasswordResets>(entity =>
        {
            entity.HasKey(e => e.ResetId).HasName("PK__Password__783CF04DE5203396");

            entity.Property(e => e.ResetId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Used).HasDefaultValue(false);

            entity.HasOne(d => d.User).WithMany(p => p.PasswordResets).HasConstraintName("FK__PasswordR__UserI__4AB81AF0");
        });

        modelBuilder.Entity<PaymentProviders>(entity =>
        {
            entity.HasKey(e => e.ProviderId).HasName("PK__PaymentP__B54C687DF9166730");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<PaymentStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentS__3214EC07F6B80889");
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A38D9B29C1E");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCompleted).HasDefaultValue(false);

            entity.HasOne(d => d.PaymentStatus).WithMany(p => p.Payments).HasConstraintName("FK__Payments__Paymen__5CD6CB2B");

            entity.HasOne(d => d.Provider).WithMany(p => p.Payments).HasConstraintName("FK__Payments__Provid__5BE2A6F2");

            entity.HasOne(d => d.User).WithMany(p => p.Payments).HasConstraintName("FK__Payments__UserId__5AEE82B9");
        });

        modelBuilder.Entity<PlayerPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PlayerPo__3214EC07526F14F4");
        });

        modelBuilder.Entity<PlayerTransfers>(entity =>
        {
            entity.HasKey(e => e.TransferId).HasName("PK__PlayerTr__95490091223CC7F0");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.FromTeam).WithMany(p => p.PlayerTransfersFromTeam).HasConstraintName("FK__PlayerTra__FromT__02084FDA");

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerTransfers).HasConstraintName("FK__PlayerTra__Playe__01142BA1");

            entity.HasOne(d => d.ToTeam).WithMany(p => p.PlayerTransfersToTeam).HasConstraintName("FK__PlayerTra__ToTea__02FC7413");
        });

        modelBuilder.Entity<Players>(entity =>
        {
            entity.HasKey(e => e.PlayerId).HasName("PK__Players__4A4E74C89BA44295");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Position).WithMany(p => p.Players).HasConstraintName("FK__Players__Positio__7C4F7684");

            entity.HasOne(d => d.Team).WithMany(p => p.Players).HasConstraintName("FK__Players__TeamId__7B5B524B");
        });

        modelBuilder.Entity<Predictions>(entity =>
        {
            entity.HasKey(e => e.PredictionId).HasName("PK__Predicti__BAE4C1A04BC6B2E4");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsPaidOnly).HasDefaultValue(true);

            entity.HasOne(d => d.Fixture).WithMany(p => p.Predictions).HasConstraintName("FK__Predictio__Fixtu__3493CFA7");
        });

        modelBuilder.Entity<ProviderWebhookEvents>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__Provider__7944C810A328BA16");

            entity.Property(e => e.Processed).HasDefaultValue(false);
            entity.Property(e => e.ReceivedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Provider).WithMany(p => p.ProviderWebhookEvents).HasConstraintName("FK__ProviderW__Provi__619B8048");
        });

        modelBuilder.Entity<Seasons>(entity =>
        {
            entity.HasKey(e => e.SeasonId).HasName("PK__Seasons__C1814E38FCD8C5CF");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.League).WithMany(p => p.Seasons).HasConstraintName("FK__Seasons__LeagueI__06CD04F7");
        });

        modelBuilder.Entity<Sessions>(entity =>
        {
            entity.HasKey(e => e.SessionId).HasName("PK__Sessions__C9F49290381B6057");

            entity.Property(e => e.SessionId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsRevoked).HasDefaultValue(false);

            entity.HasOne(d => d.User).WithMany(p => p.Sessions).HasConstraintName("FK__Sessions__UserId__44FF419A");
        });

        modelBuilder.Entity<Standings>(entity =>
        {
            entity.HasKey(e => e.StandingId).HasName("PK__Standing__FC2758C1BB956CB2");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.League).WithMany(p => p.Standings).HasConstraintName("FK__Standings__Leagu__22751F6C");

            entity.HasOne(d => d.Season).WithMany(p => p.Standings).HasConstraintName("FK__Standings__Seaso__236943A5");

            entity.HasOne(d => d.Team).WithMany(p => p.Standings).HasConstraintName("FK__Standings__TeamI__245D67DE");
        });

        modelBuilder.Entity<Statisticals>(entity =>
        {
            entity.HasKey(e => e.StatId).HasName("PK__Statisti__3A162D3EC3C82AF8");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Fixture).WithMany(p => p.Statisticals).HasConstraintName("FK__Statistic__Fixtu__282DF8C2");

            entity.HasOne(d => d.Player).WithMany(p => p.Statisticals).HasConstraintName("FK__Statistic__Playe__2A164134");

            entity.HasOne(d => d.Team).WithMany(p => p.Statisticals).HasConstraintName("FK__Statistic__TeamI__29221CFB");
        });

        modelBuilder.Entity<SubscriptionStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subscrip__3214EC0772AA2631");
        });

        modelBuilder.Entity<SubscriptionTiers>(entity =>
        {
            entity.HasKey(e => e.TierId).HasName("PK__Subscrip__362F561D086595D0");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<Subscriptions>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId).HasName("PK__Subscrip__9A2B249D6E15B08A");

            entity.Property(e => e.AutoRenew).HasDefaultValue(true);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsPaid).HasDefaultValue(false);

            entity.HasOne(d => d.SubscriptionStatus).WithMany(p => p.Subscriptions).HasConstraintName("FK__Subscript__Subsc__5535A963");

            entity.HasOne(d => d.Tier).WithMany(p => p.Subscriptions).HasConstraintName("FK__Subscript__TierI__5441852A");

            entity.HasOne(d => d.User).WithMany(p => p.Subscriptions).HasConstraintName("FK__Subscript__UserI__534D60F1");
        });

        modelBuilder.Entity<Teams>(entity =>
        {
            entity.HasKey(e => e.TeamId).HasName("PK__Teams__123AE7997168ED76");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Country).WithMany(p => p.Teams).HasConstraintName("FK__Teams__CountryId__72C60C4A");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4C5A289F2F");

            entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
        });

        modelBuilder.Entity<Venues>(entity =>
        {
            entity.HasKey(e => e.VenueId).HasName("PK__Venues__3C57E5F2C474355F");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Country).WithMany(p => p.Venues).HasConstraintName("FK__Venues__CountryI__693CA210");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}